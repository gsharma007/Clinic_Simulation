import numpy as np

"""
Customer Arrivals
"""

NUM_CUSTOMERS = 20

Cust_Arrivals = np.random.lognormal(mean=0.6, sigma=0.3, size=NUM_CUSTOMERS)
Cust_Arrival_times = [np.sum(Cust_Arrivals[:n]) for n in range(0, len(Cust_Arrivals))]


"""
1ST STEP
"""

NUM_MACHINES_HAR = 3
NUM_OPERATOR_HAR = 3

setup_times_har = np.random.exponential(scale=3, size=(NUM_MACHINES_HAR, NUM_CUSTOMERS))
service_times_harvesting = np.random.triangular(left=0.25, mode=0.5, right=0.75, size=(NUM_MACHINES_HAR, NUM_CUSTOMERS))

Waiting_time_for_service = np.zeros(NUM_CUSTOMERS) #waiting time for each customer from arrival till service
Departure_time = np.zeros(NUM_CUSTOMERS)  #Customers departure times after step 1
customers_service_times = np.zeros(NUM_CUSTOMERS) #??
machine_busy_times = np.zeros(NUM_MACHINES_HAR)  # length of time each machine has left of its current task considering all machines are ideal initially
operator_busy_time = np.zeros(NUM_OPERATOR_HAR) # length of time left for operator to finish its task considering all operators are free initially

# time for harvesting step
Time = 0

for i in range(0, len(Cust_Arrival_times)):
    
    Time_Passed_Since_Last_Arrival = Cust_Arrival_times[i] - Time  # time since last arrival
    
    # decreasing the machine busy times by the time passed
    for j in range(0, len(machine_busy_times)):
        if machine_busy_times[j] > Time_Passed_Since_Last_Arrival:
            machine_busy_times[j] -= Time_Passed_Since_Last_Arrival
        else:
            machine_busy_times[j] = 0   
    
      # length time from now until the machines get ready considering time needed for setting up machines
    machine_ready_times = np.add(machine_busy_times, setup_times_har[:, i])
    
    First_Ready_MCHN_idx = np.argmin(machine_ready_times)  # index of the machine that gets ready first
    First_Ready_Operator_idx = np.argmin(operator_busy_time)  # index of operator that will get free first
    First_machine_ready_time = machine_ready_times[First_Ready_MCHN_idx] # the time that the first machine gets ready
    First_operator_ready_time = operator_busy_time[First_Ready_Operator_idx]  # the time that the first operator gets ready
    
    customers_service_times[i] = service_times_harvesting[First_Ready_MCHN_idx, i]  # service time of the first machine
    
      # checking if operator is busy or not
    if First_operator_ready_time == 0:
        operator_busy_time[First_Ready_Operator_idx] = First_machine_ready_time
    else:
        operator_busy_time[First_Ready_Operator_idx] += First_machine_ready_time
         
    #compuing the time customer will be done with service
    Customer_End_Time = operator_busy_time[First_Ready_Operator_idx] + customers_service_times[i]
    
    # increasing the busy time of the machine giving service
    machine_busy_times[First_Ready_MCHN_idx] += Customer_End_Time

    # computing the time customer is done with service
    Departure_time[i] = Customer_End_Time + Cust_Arrival_times[i]

    # amount time customer waited to get service
    # considering both operator and machines

    Waiting_time_for_service[i] = operator_busy_time[First_Ready_Operator_idx]
    
    # progressing time to next arrival
    Time = Cust_Arrival_times[i]
    # END of FOR
    # ready time for transportation
    
Step1_times = np.subtract(Departure_time, Cust_Arrival_times)
